// -------------------------------------------------------------
// 
// File Name: hdlsrc/matrix_multiplication/nfp_mul_double.v
// Created: 2024-12-18 11:49:17
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_mul_double
// Source Path: matrix_multiplication/nfp_mul_double
// Hierarchy Level: 1
// Model version: 1.7
// 
// {Latency Strategy = "Max", Denormal Handling = "off"}
// {Mantissa Multiply Strategy = "FullMultiplier"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_mul_double
          (clk,
           reset,
           enb,
           nfp_in1,
           nfp_in2,
           nfp_out);


  input   clk;
  input   reset;
  input   enb;
  input   [63:0] nfp_in1;  // ufix64
  input   [63:0] nfp_in2;  // ufix64
  output  [63:0] nfp_out;  // ufix64


  wire aSign;  // ufix1
  wire [10:0] aExponent;  // ufix11
  wire [51:0] aMantissa;  // ufix52
  reg [10:0] Delay4_PS_1_out1;  // ufix11
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire bSign;  // ufix1
  wire [10:0] bExponent;  // ufix11
  wire [51:0] bMantissa;  // ufix52
  reg [10:0] Delay1_PS_1_out1;  // ufix11
  wire bExponent_cfType_Exponent_I_out1;  // ufix1
  wire alphaaExpInforNaN_bExpInforNa_out1;  // ufix1
  reg  Delay5_PS_1_out1;  // ufix1
  reg  Delay2_PS_1_out1;  // ufix1
  wire tmp_out1;  // ufix1
  wire Compare_To_Zero_out1;  // ufix1
  reg [51:0] Delay_PS_1_out1;  // ufix52
  wire [51:0] Constant_out1;  // ufix52
  wire [51:0] Switch_out1;  // ufix52
  wire bMantissa_0_out1;  // ufix1
  wire if_bMantZero_out1;  // ufix1
  wire Compare_To_Zero_out1_1;  // ufix1
  reg [51:0] Delay3_PS_1_out1;  // ufix52
  wire [51:0] Constant_out1_1;  // ufix52
  wire [51:0] Switch_out1_1;  // ufix52
  wire aMantissa_0_out1;  // ufix1
  wire if_aMantZero_out1;  // ufix1
  wire if_aExpInforNaN_1_out1;  // ufix1
  wire if_aExpInforNaN_bExpInforNa_2_out1;  // ufix1
  reg  [7:0] Delay6_PS_9_reg;  // ufix1 [8]
  wire Delay6_PS_9_out1;  // ufix1
  reg  [6:0] Delay11_PS_2_8_reg;  // ufix1 [7]
  wire Delay11_PS_2_8_out1;  // ufix1
  wire alphaaExponent_0_aMantZero_out1;  // ufix1
  wire alphabExponent_0_bMantZero_out1;  // ufix1
  wire alphaaIsZero_bIsZero_out1;  // ufix1
  reg  [6:0] Delay10_PS_2_8_reg;  // ufix1 [7]
  wire Delay10_PS_2_8_out1;  // ufix1
  wire alpha1_out1;  // ufix1
  wire alpha0_out1;  // ufix1
  wire if_Exponent_0_cfType_Exp_out1;  // ufix1
  wire [52:0] Bit_Concat_out1;  // ufix53
  reg [52:0] Delay_PS_3_out1;  // ufix53
  wire alpha1_out1_1;  // ufix1
  wire alpha0_out1_1;  // ufix1
  wire if_Exponent_0_cfType_Exp_out1_1;  // ufix1
  wire [52:0] Bit_Concat_out1_1;  // ufix53
  reg [52:0] Delay1_PS_3_out1;  // ufix53
  wire [105:0] z2_out1;  // ufix106
  reg [105:0] Delay2_PS_4_7_reg [0:3];  // ufix106 [4]
  reg [105:0] Delay2_PS_4_7_reg_next [0:3];  // ufix106 [4]
  reg [105:0] Delay2_PS_4_7_out1;  // ufix106
  wire BitSlice1_out1;  // ufix1
  wire [2:0] Constant_out1_2;  // ufix3
  wire [10:0] C_out1;  // ufix11
  wire [10:0] if_Exponent_0_out1;  // ufix11
  wire [13:0] Bit_Concat_out1_2;  // ufix14
  wire signed [13:0] DTC_out1;  // sfix14
  reg signed [13:0] Delay4_PS_3_out1;  // sfix14
  wire [2:0] Constant_out1_3;  // ufix3
  wire [10:0] C_out1_1;  // ufix11
  wire [10:0] if_Exponent_0_out1_1;  // ufix11
  wire [13:0] Bit_Concat_out1_3;  // ufix14
  wire signed [13:0] DTC_out1_1;  // sfix14
  reg signed [13:0] Delay5_PS_3_out1;  // sfix14
  wire signed [13:0] exp_a_norm_exp_b_norm_out1;  // sfix14
  reg signed [13:0] Delay1_PS_4_5_reg [0:1];  // sfix14 [2]
  wire signed [13:0] Delay1_PS_4_5_reg_next [0:1];  // sfix14 [2]
  wire signed [13:0] Delay1_PS_4_5_out1;  // sfix14
  wire signed [13:0] C2_out1;  // sfix14
  wire signed [13:0] exp_sum_cfType_ExponentBias_out1;  // sfix14
  reg signed [13:0] Delay3_PS_6_out1;  // sfix14
  wire exp_out_cast_cfType_Exponen_out1;  // ufix1
  reg  Delay1_PS_7_out1;  // ufix1
  wire exp_out_cast_cfType_Exponen_1_out1;  // ufix1
  wire Logical_Operator1_out1;  // ufix1
  reg  Delay4_PS_7_out1;  // ufix1
  wire if_bitget_mant_ext_mant_ext_Word_2_out1;  // ufix1
  wire exp_negative_out1;  // ufix1
  reg  Delay2_PS_7_out1;  // ufix1
  wire exp_out_cast_cfType_Exponen_2_out1;  // ufix1
  wire Logical_Operator4_out1;  // ufix1
  reg  Delay8_PS_7_out1;  // ufix1
  wire if_bitget_mant_ext_mant_ext_Word_4_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire exp_out_is_zero_out1;  // ufix1
  wire Logical_Operator3_out1;  // ufix1
  reg  Delay6_PS_7_out1;  // ufix1
  wire if_bitget_mant_ext_mant_ext_Word_3_out1;  // ufix1
  wire [53:0] Bit_Slice1_out1;  // ufix54
  wire [53:0] Bit_Slice_out1;  // ufix54
  wire [53:0] if_bitget_mant_ext_mant_ext_Word_1_out1;  // ufix54
  wire [52:0] BitSlice_out1;  // ufix53
  wire [52:0] BitSlice2_out1;  // ufix53
  wire const_0_out1;  // ufix1
  wire [52:0] if_exp_out_cast_cfType_Expone_2_out1;  // ufix53
  wire [23:0] C5_out1;  // ufix24
  wire [52:0] C5_out1_dtc;  // ufix53
  wire [52:0] if_exp_out_cast_cfType_Expone_1_out1;  // ufix53
  wire [53:0] Bit_Concat_out1_4;  // ufix54
  wire BitSlice_out1_1;  // ufix1
  wire BitSlice1_out1_1;  // ufix1
  reg  Delay3_PS_8_out1;  // ufix1
  wire [50:0] Bit_Slice2_out1;  // ufix51
  wire Compare_To_Zero_out1_2;  // ufix1
  wire BitSlice52ndBitS;  // ufix1
  wire LogicalOperatorAndOutS;  // ufix1
  wire LogicalOperatorOrOutS;  // ufix1
  wire Bit_Slice3_out1;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire if_exp_out_cast_cfType_Expone_3_out1;  // ufix1
  reg  Delay2_PS_8_out1;  // ufix1
  reg  Delay2_PS_8_out1_1;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  reg  Delay4_PS_2N_out1;  // ufix1
  wire [52:0] BitSlice4_out1;  // ufix53
  reg [52:0] Delay1_PS_8_out1;  // ufix53
  reg [52:0] Delay2_PS_2N_out1;  // ufix53
  wire [52:0] const_2_out1;  // ufix53
  wire [52:0] Mant_tmp_Incr_2_out1;  // ufix53
  reg [52:0] Delay3_PS_2N_out1;  // ufix53
  wire [52:0] if_bitget_Mant_tmp_1_0_out1;  // ufix53
  wire BitSlice2_out1_1;  // ufix1
  reg signed [13:0] Delay12_PS_7_out1;  // sfix14
  wire [10:0] C1_out1;  // ufix11
  wire signed [14:0] Add_add_temp;  // sfix15
  wire signed [14:0] Add_1;  // sfix15
  wire signed [14:0] Add_2;  // sfix15
  wire signed [13:0] Add_out1;  // sfix14
  reg signed [13:0] Delay7_PS_7_out1;  // sfix14
  wire signed [13:0] if_exp_out_cast_cfType_Expone_4_out1;  // sfix14
  wire [10:0] Bit_Slice4_out1;  // ufix11
  wire [10:0] C2_out1_1;  // ufix11
  wire [10:0] if_exp_out_cfType_MantissaLen_out1;  // ufix11
  wire [10:0] C4_out1;  // ufix11
  wire [10:0] if_exp_out_cast_cfType_Expone_out1;  // ufix11
  reg [10:0] Delay_PS_8_out1;  // ufix11
  reg [10:0] Delay1_PS_2N_out1;  // ufix11
  wire [10:0] const_1_out1;  // ufix11
  wire [10:0] Exp_Incr_out1;  // ufix11
  reg [10:0] Delay_PS_2N_out1;  // ufix11
  wire [10:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix11
  wire [10:0] C_out1_2;  // ufix11
  wire [10:0] if_aIsZero_bIsZero_out1;  // ufix11
  wire [10:0] C2_out1_2;  // ufix11
  wire [10:0] if_aExpInforNaN_bExpInforNa_out1;  // ufix11
  reg [10:0] Delay7_PS_9_out1;  // ufix11
  wire Compare_To_Zero_out1_3;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire [51:0] BitSlice3_out1;  // ufix52
  wire [51:0] C1_out1_1;  // ufix52
  wire [51:0] if_aIsZero_bIsZero_1_out1;  // ufix52
  wire [51:0] C1_out1_2;  // ufix52
  wire [51:0] if_aIsZero_out1;  // ufix52
  wire [51:0] C_out1_3;  // ufix52
  wire [51:0] if_bIsZero_out1;  // ufix52
  wire [51:0] if_aExpInforNaN_out1;  // ufix52
  reg [51:0] Delay9_PS_2_8_reg [0:6];  // ufix52 [7]
  reg [51:0] Delay9_PS_2_8_reg_next [0:6];  // ufix52 [7]
  reg [51:0] Delay9_PS_2_8_out1;  // ufix52
  wire [51:0] if_aExpInforNaN_bExpInforNa_1_out1;  // ufix52
  reg [51:0] Delay8_PS_9_out1;  // ufix52
  wire [63:0] nfp_out_pack;  // ufix64
  reg signed [31:0] Delay2_PS_4_7_t_0_0;  // int32
  reg signed [31:0] Delay2_PS_4_7_t_0_1;  // int32
  reg signed [31:0] Delay2_PS_4_7_t_1;  // int32
  reg signed [31:0] Delay1_PS_4_5_t_0_0;  // int32
  reg signed [31:0] Delay1_PS_4_5_t_1;  // int32
  reg signed [31:0] Delay9_PS_2_8_t_0_0;  // int32
  reg signed [31:0] Delay9_PS_2_8_t_0_1;  // int32
  reg signed [31:0] Delay9_PS_2_8_t_1;  // int32


  // Split 64 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in1[63];
  assign aExponent = nfp_in1[62:52];
  assign aMantissa = nfp_in1[51:0];

  always @(posedge clk or posedge reset)
    begin : Delay4_PS_1_process
      if (reset == 1'b1) begin
        Delay4_PS_1_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS_1_out1 <= aExponent;
        end
      end
    end

  assign aExponent_cfType_Exponent_I_out1 = Delay4_PS_1_out1 == 11'b11111111111;

  // Split 64 bit word into FP sign, exponent, mantissa
  assign bSign = nfp_in2[63];
  assign bExponent = nfp_in2[62:52];
  assign bMantissa = nfp_in2[51:0];

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_1_process
      if (reset == 1'b1) begin
        Delay1_PS_1_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_1_out1 <= bExponent;
        end
      end
    end

  assign bExponent_cfType_Exponent_I_out1 = Delay1_PS_1_out1 == 11'b11111111111;

  assign alphaaExpInforNaN_bExpInforNa_out1 = aExponent_cfType_Exponent_I_out1 | bExponent_cfType_Exponent_I_out1;

  always @(posedge clk or posedge reset)
    begin : Delay5_PS_1_process
      if (reset == 1'b1) begin
        Delay5_PS_1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay5_PS_1_out1 <= aSign;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_1_process
      if (reset == 1'b1) begin
        Delay2_PS_1_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_PS_1_out1 <= bSign;
        end
      end
    end

  assign tmp_out1 = Delay5_PS_1_out1 ^ Delay2_PS_1_out1;

  assign Compare_To_Zero_out1 = Delay1_PS_1_out1 == 11'b00000000000;

  always @(posedge clk or posedge reset)
    begin : Delay_PS_1_process
      if (reset == 1'b1) begin
        Delay_PS_1_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_1_out1 <= bMantissa;
        end
      end
    end

  assign Constant_out1 = 52'h0000000000000;

  assign Switch_out1 = (Compare_To_Zero_out1 == 1'b0 ? Delay_PS_1_out1 :
              Constant_out1);

  assign bMantissa_0_out1 = Switch_out1 == 52'h0000000000000;

  assign if_bMantZero_out1 = (bMantissa_0_out1 == 1'b0 ? Delay2_PS_1_out1 :
              tmp_out1);

  assign Compare_To_Zero_out1_1 = Delay4_PS_1_out1 == 11'b00000000000;

  always @(posedge clk or posedge reset)
    begin : Delay3_PS_1_process
      if (reset == 1'b1) begin
        Delay3_PS_1_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS_1_out1 <= aMantissa;
        end
      end
    end

  assign Constant_out1_1 = 52'h0000000000000;

  assign Switch_out1_1 = (Compare_To_Zero_out1_1 == 1'b0 ? Delay3_PS_1_out1 :
              Constant_out1_1);

  assign aMantissa_0_out1 = Switch_out1_1 == 52'h0000000000000;

  assign if_aMantZero_out1 = (aMantissa_0_out1 == 1'b0 ? Delay5_PS_1_out1 :
              tmp_out1);

  assign if_aExpInforNaN_1_out1 = (aExponent_cfType_Exponent_I_out1 == 1'b0 ? if_bMantZero_out1 :
              if_aMantZero_out1);

  assign if_aExpInforNaN_bExpInforNa_2_out1 = (alphaaExpInforNaN_bExpInforNa_out1 == 1'b0 ? tmp_out1 :
              if_aExpInforNaN_1_out1);

  always @(posedge clk or posedge reset)
    begin : Delay6_PS_9_process
      if (reset == 1'b1) begin
        Delay6_PS_9_reg <= {8{1'b0}};
      end
      else begin
        if (enb) begin
          Delay6_PS_9_reg[0] <= if_aExpInforNaN_bExpInforNa_2_out1;
          Delay6_PS_9_reg[32'sd7:32'sd1] <= Delay6_PS_9_reg[32'sd6:32'sd0];
        end
      end
    end

  assign Delay6_PS_9_out1 = Delay6_PS_9_reg[7];

  always @(posedge clk or posedge reset)
    begin : Delay11_PS_2_8_process
      if (reset == 1'b1) begin
        Delay11_PS_2_8_reg <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          Delay11_PS_2_8_reg[0] <= alphaaExpInforNaN_bExpInforNa_out1;
          Delay11_PS_2_8_reg[32'sd6:32'sd1] <= Delay11_PS_2_8_reg[32'sd5:32'sd0];
        end
      end
    end

  assign Delay11_PS_2_8_out1 = Delay11_PS_2_8_reg[6];

  assign alphaaExponent_0_aMantZero_out1 = Compare_To_Zero_out1_1 & aMantissa_0_out1;

  assign alphabExponent_0_bMantZero_out1 = Compare_To_Zero_out1 & bMantissa_0_out1;

  assign alphaaIsZero_bIsZero_out1 = alphaaExponent_0_aMantZero_out1 | alphabExponent_0_bMantZero_out1;

  always @(posedge clk or posedge reset)
    begin : Delay10_PS_2_8_process
      if (reset == 1'b1) begin
        Delay10_PS_2_8_reg <= {7{1'b0}};
      end
      else begin
        if (enb) begin
          Delay10_PS_2_8_reg[0] <= alphaaIsZero_bIsZero_out1;
          Delay10_PS_2_8_reg[32'sd6:32'sd1] <= Delay10_PS_2_8_reg[32'sd5:32'sd0];
        end
      end
    end

  assign Delay10_PS_2_8_out1 = Delay10_PS_2_8_reg[6];

  assign alpha1_out1 = 1'b1;

  assign alpha0_out1 = 1'b0;

  assign if_Exponent_0_cfType_Exp_out1 = (Compare_To_Zero_out1_1 == 1'b0 ? alpha1_out1 :
              alpha0_out1);

  assign Bit_Concat_out1 = {if_Exponent_0_cfType_Exp_out1, Switch_out1_1};

  always @(posedge clk or posedge reset)
    begin : Delay_PS_3_process
      if (reset == 1'b1) begin
        Delay_PS_3_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_3_out1 <= Bit_Concat_out1;
        end
      end
    end

  assign alpha1_out1_1 = 1'b1;

  assign alpha0_out1_1 = 1'b0;

  assign if_Exponent_0_cfType_Exp_out1_1 = (Compare_To_Zero_out1 == 1'b0 ? alpha1_out1_1 :
              alpha0_out1_1);

  assign Bit_Concat_out1_1 = {if_Exponent_0_cfType_Exp_out1_1, Switch_out1};

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_3_process
      if (reset == 1'b1) begin
        Delay1_PS_3_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_3_out1 <= Bit_Concat_out1_1;
        end
      end
    end

  assign z2_out1 = Delay_PS_3_out1 * Delay1_PS_3_out1;

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_4_7_process
      if (reset == 1'b1) begin
        for(Delay2_PS_4_7_t_1 = 32'sd0; Delay2_PS_4_7_t_1 <= 32'sd3; Delay2_PS_4_7_t_1 = Delay2_PS_4_7_t_1 + 32'sd1) begin
          Delay2_PS_4_7_reg[Delay2_PS_4_7_t_1] <= 106'h000000000000000000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay2_PS_4_7_t_0_1 = 32'sd0; Delay2_PS_4_7_t_0_1 <= 32'sd3; Delay2_PS_4_7_t_0_1 = Delay2_PS_4_7_t_0_1 + 32'sd1) begin
            Delay2_PS_4_7_reg[Delay2_PS_4_7_t_0_1] <= Delay2_PS_4_7_reg_next[Delay2_PS_4_7_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay2_PS_4_7_out1 = Delay2_PS_4_7_reg[3];
    Delay2_PS_4_7_reg_next[0] = z2_out1;

    for(Delay2_PS_4_7_t_0_0 = 32'sd0; Delay2_PS_4_7_t_0_0 <= 32'sd2; Delay2_PS_4_7_t_0_0 = Delay2_PS_4_7_t_0_0 + 32'sd1) begin
      Delay2_PS_4_7_reg_next[Delay2_PS_4_7_t_0_0 + 32'sd1] = Delay2_PS_4_7_reg[Delay2_PS_4_7_t_0_0];
    end

  end

  assign BitSlice1_out1 = Delay2_PS_4_7_out1[105];

  assign Constant_out1_2 = 3'b000;

  assign C_out1 = 11'b00000000001;

  assign if_Exponent_0_out1 = (Compare_To_Zero_out1_1 == 1'b0 ? Delay4_PS_1_out1 :
              C_out1);

  assign Bit_Concat_out1_2 = {Constant_out1_2, if_Exponent_0_out1};

  assign DTC_out1 = Bit_Concat_out1_2;

  always @(posedge clk or posedge reset)
    begin : Delay4_PS_3_process
      if (reset == 1'b1) begin
        Delay4_PS_3_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay4_PS_3_out1 <= DTC_out1;
        end
      end
    end

  assign Constant_out1_3 = 3'b000;

  assign C_out1_1 = 11'b00000000001;

  assign if_Exponent_0_out1_1 = (Compare_To_Zero_out1 == 1'b0 ? Delay1_PS_1_out1 :
              C_out1_1);

  assign Bit_Concat_out1_3 = {Constant_out1_3, if_Exponent_0_out1_1};

  assign DTC_out1_1 = Bit_Concat_out1_3;

  always @(posedge clk or posedge reset)
    begin : Delay5_PS_3_process
      if (reset == 1'b1) begin
        Delay5_PS_3_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay5_PS_3_out1 <= DTC_out1_1;
        end
      end
    end

  assign exp_a_norm_exp_b_norm_out1 = Delay4_PS_3_out1 + Delay5_PS_3_out1;

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_4_5_process
      if (reset == 1'b1) begin
        for(Delay1_PS_4_5_t_1 = 32'sd0; Delay1_PS_4_5_t_1 <= 32'sd1; Delay1_PS_4_5_t_1 = Delay1_PS_4_5_t_1 + 32'sd1) begin
          Delay1_PS_4_5_reg[Delay1_PS_4_5_t_1] <= 14'sb00000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay1_PS_4_5_t_0_0 = 32'sd0; Delay1_PS_4_5_t_0_0 <= 32'sd1; Delay1_PS_4_5_t_0_0 = Delay1_PS_4_5_t_0_0 + 32'sd1) begin
            Delay1_PS_4_5_reg[Delay1_PS_4_5_t_0_0] <= Delay1_PS_4_5_reg_next[Delay1_PS_4_5_t_0_0];
          end
        end
      end
    end

  assign Delay1_PS_4_5_out1 = Delay1_PS_4_5_reg[1];
  assign Delay1_PS_4_5_reg_next[0] = exp_a_norm_exp_b_norm_out1;
  assign Delay1_PS_4_5_reg_next[1] = Delay1_PS_4_5_reg[0];

  assign C2_out1 = 14'sb11110000000001;

  assign exp_sum_cfType_ExponentBias_out1 = Delay1_PS_4_5_out1 + C2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_PS_6_process
      if (reset == 1'b1) begin
        Delay3_PS_6_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS_6_out1 <= exp_sum_cfType_ExponentBias_out1;
        end
      end
    end

  assign exp_out_cast_cfType_Exponen_out1 = Delay3_PS_6_out1 > 14'sb00011111111110;

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_7_process
      if (reset == 1'b1) begin
        Delay1_PS_7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay1_PS_7_out1 <= exp_out_cast_cfType_Exponen_out1;
        end
      end
    end

  assign exp_out_cast_cfType_Exponen_1_out1 = Delay3_PS_6_out1 == 14'sb00011111111110;

  assign Logical_Operator1_out1 = exp_out_cast_cfType_Exponen_1_out1 | exp_out_cast_cfType_Exponen_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_PS_7_process
      if (reset == 1'b1) begin
        Delay4_PS_7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_PS_7_out1 <= Logical_Operator1_out1;
        end
      end
    end

  assign if_bitget_mant_ext_mant_ext_Word_2_out1 = (BitSlice1_out1 == 1'b0 ? Delay1_PS_7_out1 :
              Delay4_PS_7_out1);

  assign exp_negative_out1 = Delay3_PS_6_out1[13];

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_7_process
      if (reset == 1'b1) begin
        Delay2_PS_7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_PS_7_out1 <= exp_negative_out1;
        end
      end
    end

  assign exp_out_cast_cfType_Exponen_2_out1 = Delay3_PS_6_out1 != 14'sb11111111111111;

  assign Logical_Operator4_out1 = exp_out_cast_cfType_Exponen_2_out1 & exp_negative_out1;

  always @(posedge clk or posedge reset)
    begin : Delay8_PS_7_process
      if (reset == 1'b1) begin
        Delay8_PS_7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_PS_7_out1 <= Logical_Operator4_out1;
        end
      end
    end

  assign if_bitget_mant_ext_mant_ext_Word_4_out1 = (BitSlice1_out1 == 1'b0 ? Delay2_PS_7_out1 :
              Delay8_PS_7_out1);

  assign Logical_Operator_out1 = if_bitget_mant_ext_mant_ext_Word_2_out1 | if_bitget_mant_ext_mant_ext_Word_4_out1;

  assign exp_out_is_zero_out1 = Delay3_PS_6_out1 == 14'sb00000000000000;

  assign Logical_Operator3_out1 = exp_negative_out1 | exp_out_is_zero_out1;

  always @(posedge clk or posedge reset)
    begin : Delay6_PS_7_process
      if (reset == 1'b1) begin
        Delay6_PS_7_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_PS_7_out1 <= Logical_Operator3_out1;
        end
      end
    end

  assign if_bitget_mant_ext_mant_ext_Word_3_out1 = (BitSlice1_out1 == 1'b0 ? Delay6_PS_7_out1 :
              Delay2_PS_7_out1);

  assign Bit_Slice1_out1 = Delay2_PS_4_7_out1[104:51];

  assign Bit_Slice_out1 = Delay2_PS_4_7_out1[105:52];

  assign if_bitget_mant_ext_mant_ext_Word_1_out1 = (BitSlice1_out1 == 1'b0 ? Bit_Slice1_out1 :
              Bit_Slice_out1);

  assign BitSlice_out1 = if_bitget_mant_ext_mant_ext_Word_1_out1[52:0];

  assign BitSlice2_out1 = if_bitget_mant_ext_mant_ext_Word_1_out1[53:1];

  assign const_0_out1 = 1'b0;

  assign if_exp_out_cast_cfType_Expone_2_out1 = (if_bitget_mant_ext_mant_ext_Word_3_out1 == 1'b0 ? BitSlice_out1 :
              BitSlice2_out1);

  assign C5_out1 = 24'b000000000000000000000000;

  assign C5_out1_dtc = {29'b0, C5_out1};

  assign if_exp_out_cast_cfType_Expone_1_out1 = (Logical_Operator_out1 == 1'b0 ? if_exp_out_cast_cfType_Expone_2_out1 :
              C5_out1_dtc);

  assign Bit_Concat_out1_4 = {const_0_out1, if_exp_out_cast_cfType_Expone_1_out1};

  assign BitSlice_out1_1 = Bit_Concat_out1_4[0];

  assign BitSlice1_out1_1 = Bit_Concat_out1_4[1];

  always @(posedge clk or posedge reset)
    begin : Delay3_PS_8_process
      if (reset == 1'b1) begin
        Delay3_PS_8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_PS_8_out1 <= BitSlice1_out1_1;
        end
      end
    end

  assign Bit_Slice2_out1 = Delay2_PS_4_7_out1[50:0];

  assign Compare_To_Zero_out1_2 = Bit_Slice2_out1 != 51'h0000000000000;

  assign BitSlice52ndBitS = Delay2_PS_4_7_out1[51];

  assign LogicalOperatorAndOutS = BitSlice1_out1 & BitSlice52ndBitS;

  assign LogicalOperatorOrOutS = Compare_To_Zero_out1_2 | LogicalOperatorAndOutS;

  assign Bit_Slice3_out1 = if_bitget_mant_ext_mant_ext_Word_1_out1[0];

  assign Logical_Operator2_out1 = LogicalOperatorOrOutS | Bit_Slice3_out1;

  assign if_exp_out_cast_cfType_Expone_3_out1 = (if_bitget_mant_ext_mant_ext_Word_3_out1 == 1'b0 ? LogicalOperatorOrOutS :
              Logical_Operator2_out1);

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_8_process
      if (reset == 1'b1) begin
        Delay2_PS_8_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_PS_8_out1 <= BitSlice_out1_1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_8_1_process
      if (reset == 1'b1) begin
        Delay2_PS_8_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay2_PS_8_out1_1 <= if_exp_out_cast_cfType_Expone_3_out1;
        end
      end
    end

  assign alphabitget_Mant_tmp_2_0_out1 = Delay3_PS_8_out1 | Delay2_PS_8_out1_1;

  assign alphabitget_Mant_tmp_1_0_out1 = Delay2_PS_8_out1 & alphabitget_Mant_tmp_2_0_out1;

  always @(posedge clk or posedge reset)
    begin : Delay4_PS_2N_process
      if (reset == 1'b1) begin
        Delay4_PS_2N_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay4_PS_2N_out1 <= alphabitget_Mant_tmp_1_0_out1;
        end
      end
    end

  assign BitSlice4_out1 = Bit_Concat_out1_4[53:1];

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_8_process
      if (reset == 1'b1) begin
        Delay1_PS_8_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_8_out1 <= BitSlice4_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay2_PS_2N_process
      if (reset == 1'b1) begin
        Delay2_PS_2N_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay2_PS_2N_out1 <= Delay1_PS_8_out1;
        end
      end
    end

  assign const_2_out1 = 53'h00000000000001;

  assign Mant_tmp_Incr_2_out1 = Delay1_PS_8_out1 + const_2_out1;

  always @(posedge clk or posedge reset)
    begin : Delay3_PS_2N_process
      if (reset == 1'b1) begin
        Delay3_PS_2N_out1 <= 53'h00000000000000;
      end
      else begin
        if (enb) begin
          Delay3_PS_2N_out1 <= Mant_tmp_Incr_2_out1;
        end
      end
    end

  assign if_bitget_Mant_tmp_1_0_out1 = (Delay4_PS_2N_out1 == 1'b0 ? Delay2_PS_2N_out1 :
              Delay3_PS_2N_out1);

  assign BitSlice2_out1_1 = if_bitget_Mant_tmp_1_0_out1[52];

  always @(posedge clk or posedge reset)
    begin : Delay12_PS_7_process
      if (reset == 1'b1) begin
        Delay12_PS_7_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay12_PS_7_out1 <= Delay3_PS_6_out1;
        end
      end
    end

  assign C1_out1 = 11'b00000000001;

  assign Add_1 = {Delay3_PS_6_out1[13], Delay3_PS_6_out1};
  assign Add_2 = {4'b0, C1_out1};
  assign Add_add_temp = Add_1 + Add_2;
  assign Add_out1 = Add_add_temp[13:0];

  always @(posedge clk or posedge reset)
    begin : Delay7_PS_7_process
      if (reset == 1'b1) begin
        Delay7_PS_7_out1 <= 14'sb00000000000000;
      end
      else begin
        if (enb) begin
          Delay7_PS_7_out1 <= Add_out1;
        end
      end
    end

  assign if_exp_out_cast_cfType_Expone_4_out1 = (BitSlice1_out1 == 1'b0 ? Delay12_PS_7_out1 :
              Delay7_PS_7_out1);

  assign Bit_Slice4_out1 = if_exp_out_cast_cfType_Expone_4_out1[10:0];

  assign C2_out1_1 = 11'b00000000000;

  assign if_exp_out_cfType_MantissaLen_out1 = (if_bitget_mant_ext_mant_ext_Word_3_out1 == 1'b0 ? Bit_Slice4_out1 :
              C2_out1_1);

  assign C4_out1 = 11'b11111111111;

  assign if_exp_out_cast_cfType_Expone_out1 = (if_bitget_mant_ext_mant_ext_Word_2_out1 == 1'b0 ? if_exp_out_cfType_MantissaLen_out1 :
              C4_out1);

  always @(posedge clk or posedge reset)
    begin : Delay_PS_8_process
      if (reset == 1'b1) begin
        Delay_PS_8_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_8_out1 <= if_exp_out_cast_cfType_Expone_out1;
        end
      end
    end

  always @(posedge clk or posedge reset)
    begin : Delay1_PS_2N_process
      if (reset == 1'b1) begin
        Delay1_PS_2N_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay1_PS_2N_out1 <= Delay_PS_8_out1;
        end
      end
    end

  assign const_1_out1 = 11'b00000000001;

  assign Exp_Incr_out1 = Delay_PS_8_out1 + const_1_out1;

  always @(posedge clk or posedge reset)
    begin : Delay_PS_2N_process
      if (reset == 1'b1) begin
        Delay_PS_2N_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay_PS_2N_out1 <= Exp_Incr_out1;
        end
      end
    end

  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1_1 == 1'b0 ? Delay1_PS_2N_out1 :
              Delay_PS_2N_out1);

  assign C_out1_2 = 11'b00000000000;

  assign if_aIsZero_bIsZero_out1 = (Delay10_PS_2_8_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              C_out1_2);

  assign C2_out1_2 = 11'b11111111111;

  assign if_aExpInforNaN_bExpInforNa_out1 = (Delay11_PS_2_8_out1 == 1'b0 ? if_aIsZero_bIsZero_out1 :
              C2_out1_2);

  always @(posedge clk or posedge reset)
    begin : Delay7_PS_9_process
      if (reset == 1'b1) begin
        Delay7_PS_9_out1 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay7_PS_9_out1 <= if_aExpInforNaN_bExpInforNa_out1;
        end
      end
    end

  assign Compare_To_Zero_out1_3 = Delay1_PS_2N_out1 == 11'b00000000000;

  assign Logical_Operator_out1_1 = Compare_To_Zero_out1_3 | BitSlice2_out1_1;

  assign Logical_Operator_out1_2 = Delay10_PS_2_8_out1 | Logical_Operator_out1_1;

  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[51:0];

  assign C1_out1_1 = 52'h0000000000000;

  assign if_aIsZero_bIsZero_1_out1 = (Logical_Operator_out1_2 == 1'b0 ? BitSlice3_out1 :
              C1_out1_1);

  assign C1_out1_2 = 52'h8000000000000;

  assign if_aIsZero_out1 = (alphaaExponent_0_aMantZero_out1 == 1'b0 ? Switch_out1 :
              C1_out1_2);

  assign C_out1_3 = 52'h8000000000000;

  assign if_bIsZero_out1 = (alphabExponent_0_bMantZero_out1 == 1'b0 ? Switch_out1_1 :
              C_out1_3);

  assign if_aExpInforNaN_out1 = (aExponent_cfType_Exponent_I_out1 == 1'b0 ? if_aIsZero_out1 :
              if_bIsZero_out1);

  always @(posedge clk or posedge reset)
    begin : Delay9_PS_2_8_process
      if (reset == 1'b1) begin
        for(Delay9_PS_2_8_t_1 = 32'sd0; Delay9_PS_2_8_t_1 <= 32'sd6; Delay9_PS_2_8_t_1 = Delay9_PS_2_8_t_1 + 32'sd1) begin
          Delay9_PS_2_8_reg[Delay9_PS_2_8_t_1] <= 52'h0000000000000;
        end
      end
      else begin
        if (enb) begin
          for(Delay9_PS_2_8_t_0_1 = 32'sd0; Delay9_PS_2_8_t_0_1 <= 32'sd6; Delay9_PS_2_8_t_0_1 = Delay9_PS_2_8_t_0_1 + 32'sd1) begin
            Delay9_PS_2_8_reg[Delay9_PS_2_8_t_0_1] <= Delay9_PS_2_8_reg_next[Delay9_PS_2_8_t_0_1];
          end
        end
      end
    end

  always @* begin
    Delay9_PS_2_8_out1 = Delay9_PS_2_8_reg[6];
    Delay9_PS_2_8_reg_next[0] = if_aExpInforNaN_out1;

    for(Delay9_PS_2_8_t_0_0 = 32'sd0; Delay9_PS_2_8_t_0_0 <= 32'sd5; Delay9_PS_2_8_t_0_0 = Delay9_PS_2_8_t_0_0 + 32'sd1) begin
      Delay9_PS_2_8_reg_next[Delay9_PS_2_8_t_0_0 + 32'sd1] = Delay9_PS_2_8_reg[Delay9_PS_2_8_t_0_0];
    end

  end

  assign if_aExpInforNaN_bExpInforNa_1_out1 = (Delay11_PS_2_8_out1 == 1'b0 ? if_aIsZero_bIsZero_1_out1 :
              Delay9_PS_2_8_out1);

  always @(posedge clk or posedge reset)
    begin : Delay8_PS_9_process
      if (reset == 1'b1) begin
        Delay8_PS_9_out1 <= 52'h0000000000000;
      end
      else begin
        if (enb) begin
          Delay8_PS_9_out1 <= if_aExpInforNaN_bExpInforNa_1_out1;
        end
      end
    end

  // Combine FP sign, exponent, mantissa into 64 bit word
  assign nfp_out_pack = {Delay6_PS_9_out1, Delay7_PS_9_out1, Delay8_PS_9_out1};

  assign nfp_out = nfp_out_pack;

endmodule  // nfp_mul_double

